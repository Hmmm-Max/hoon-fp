::
::::  /hook/gate/fp/cat
  ::
/?  314
::
::::
!:  =<
=+  f==>(fl .(p 24, v -149, w 253, r %u))
|=  [* [[a=[? @s @u] b=[? @s @u] ~] ~]]
:-  %noun  (add:f [%f a] [%f b])
::|=  [* [[a=[? @s @u] ~] ~]]
:::-  %noun  (rou:f [%f a])
::
|%
++  fn  ::  float, infinity, or NaN
        ::  s=sign, e=exponent, a=arithmetic form
        ::  (-1)^s * a * 2^e
        ::  c=& : signalling NaN, c=| : quiet NaN
        $%  [%f s=? e=@s a=@u]
            [%i s=?]
            [%n c=?]
        ==
::
++  fl
  |_  [p=@u v=@s w=@u r=?(%n %u %d %z)]
  ::  p=precision: number of bits in arithmetic form (NOT HIDDEN BIT!!)
  ::  v=minimum value of e
  ::  w=width: max - min value of e
  ::  r=rounding mode: round to nearest, round up, round down, round to 0
  ::  binary32: [24 -149 253 r] (-149 = -126 - 24 + 1)
  ::
  ++  m                                                 ::  internal functions, constants
    |%
    ::  do not put 0s into these
    ++  rou  |=  [a=[e=@s a=@u]]  ^-  fn 
             ?-  r
               %n  (lag a %nr)  %u  (lag a %ce)
               %d  (lag a %fl)  %z  (lag a %fl)
             ==
    ::
    ++  add  |=  [a=[e=@s a=@u] b=[e=@s a=@u]]  ^-  fn
             =+  q=(dif:si e.a e.b)
             |-  ?.  (syn:si q)  $(b a, a b, q +(q))    ::  a has larger exponent
             =+  [ma=(met 0 a.a) mb=(met 0 a.b)]
             =+  ^=  w  %+  dif:si  e.a  %-  sun:si     ::  expanded exponent of a
               ?:  (^gth p ma)  (^^sub p ma)  0
             =+  ^=  x  %+  sum:si  e.b  %-  sun:si     ::  highest exponent that b reaches
               ?:  =(r %n)  mb  (dec mb)                ::  avoid halfway matches for nearest rd
             ?:  =((cmp:si w x) --1)                    ::  don't need to bother performing add
               ?:  =(r %u)  (lag a %lg)
               (rou a)
             %-  rou
               [e.b (^^add (lsh 0 (abs:si q) a.a) a.b)]
    ::
    ++  sub  |=  [a=[e=@s a=@u] b=[e=@s a=@u]]  ^-  fn
             !!
    ::
    ++  equ  |=  [a=[e=@s a=@u] b=[e=@s a=@u]]
             ?.  =((log a) (log b))  |
             ?:  =((cmp:si e.a e.b) -1)
               =((lsh 0 (abs:si (dif:si e.a e.b)) a.b) a.a)
             =((lsh 0 (abs:si (dif:si e.a e.b)) a.a) a.b)
    ::
    ++  lth  |=  [a=[e=@s a=@u] b=[e=@s a=@u]]
             ?:  =(e.a e.b)  (^^lth a.a a.b)
             =+  c=(cmp:si (log a) (log b))
             ?:  =(c -1)  &  ?:  =(c --1)  |
             ?:  =((cmp:si e.a e.b) -1)
               (^^lth (rsh 0 (abs:si (dif:si e.a e.b)) a.a) a.b)
             (^^lth (lsh 0 (abs:si (dif:si e.a e.b)) a.a) a.b)
    ::
    ++  lte  |=  [a=[e=@s a=@u] b=[e=@s a=@u]]
             ?:  =(e.a e.b)  (^^lte a.a a.b)
             =+  c=(cmp:si (log a) (log b))
             ?:  =(c -1)  &  ?:  =(c --1)  |
             ?:  =((cmp:si e.a e.b) -1)
               (^^lte a.a (lsh 0 (abs:si (dif:si e.a e.b)) a.b))
             (^^lte (lsh 0 (abs:si (dif:si e.a e.b)) a.a) a.b)
    ::
    ++  log  |=  [a=[e=@s a=@u]]
             (sum:si (sun:si (dec (met 0 a.a))) e.a)
    ::
    ++  uni  |=  [a=[e=@s a=@u]]
             ?<  =(a.a 0)
             |-  ?:  =((end 0 1 a.a) 1)  a
             $(a.a (rsh 0 1 a.a), e.a (sum:si e.a --1))
    ::
    ::  assumes that (met 0 a.a) <= p!!
    ++  xpd  |=  [a=[e=@s a=@u]]
             =+  (min (abs:si (dif:si e.a v)) (^^sub p (met 0 a.a)))
             a(e (dif:si e.a (sun:si -)), a (lsh 0 - a.a))
    ::
    ::  in order: floor, ceiling, nearest, larger, smaller
    ++  lag  |=  [a=[e=@s a=@u] t=?(%fl %ce %nr %lg %sm)]  ^-  fn
             =+  m=(met 0 a.a)
             ::
             =+  f=(^gth m p)
             =+  q=?:(f (^^sub m p) 0)
             =+  ^=  b  ?.  f  a                        ::  reduce precision
               a(e (sum:si e.a (sun:si q)), a (rsh 0 q a.a))
             ::
             =+  g==((cmp:si e.b v) -1)
             =+  r=?:(g (dif:si v e.b) --0)
             =.  b  ?.  g  b                            ::  enforce min. exp
               b(e (sum:si e.b r), a (rsh 0 (abs:si r) a.b))
             ::
             ::  x is the digits that were removed, w is the length.
             ::  from this point on, we don't lose any precision.
             =+  w=(^^add q (abs:si r))
             =+  [x=(end 0 w a.a) y=?~(w 0 (bex (dec w)))]
             ::
             ?:  =(a.b 0)
               ?-  t
                 %fl  [%f & zer]  %sm  [%f & zer]
                 %ce  [%f & spd]  %lg  [%f & spd]
                 %nr  [%f & ?:((^^lte x y) zer spd)]
               ==
             ::
             =.  b  ?:  =(t %fl)  b  (xpd b)            ::  expand
             ::
             =.  b  %-  uni
               ?-  t
                 %fl  b
                 %ce  ?.  &(|(f g) !=(x 0))  b  b(a +(a.b))
                 %nr  ?.  &(|(f g) !=(x 0))  b
                      ?:  =(x y)                        ::  halfway rounds to even
                        ?:  =((dis a.b 1) 0)  b  b(a +(a.b))
                      ?:  (^^lth x y)  b  b(a +(a.b))
                 %sm  ?:  =(x 0)  b(a (dec a.b))  b
                 %lg  b(a +(a.b))
               ==
             ?:  =(a.b 0)  [%f & zer]
             ::
             =.  b  ?.  =((cmp:si e.b uex) --1)  b      ::  enforce max. exp
               b(e uex, a (lsh 0 (abs:si (dif:si e.b uex)) a.b))
             ::
             ?:  (^gth (met 0 a.b) p)  [%i &]  [%f & b]
    ::
    ++  swr  ?+(r r %d %u, %u %d)
    ++  emn  (sum:si v (sun:si (dec p)))
    ++  emx  (sum:si emn (sun:si w))
    ++  uex  (sum:si v (sun:si w))
    ++  spd  [v 1]                                      ::  smallest "denormal"
    ++  spn  [emn 1]                                    ::  smallest "normal"
    ++  lfn  [uex (fil 0 p 1)]                          ::  largest
    ++  zer  [--0 0]                                    ::  zero
    --
  ::
  ++  rou  |=  [a=fn]  ^-  fn
           ?.  ?=([%f *] a)  a
           ?~  a.a  [%f s.a --0 0]
           ?:  s.a  (rou:m +>.a)
           =.(r swr:m (fli (rou:m +>.a)))
  ::
  ++  fli  |=  [a=fn]  ^-  fn
           ?-(-.a %f a(s !s.a), %i a(s !s.a), %n a)
  ::
  ++  add  |=  [a=fn b=fn]  ^-  fn
           ?:  |(?=([%n *] a) ?=([%n *] b))  [%n |]
           ?:  |(?=([%i *] a) ?=([%i *] b))
             ?:  &(?=([%i *] a) ?=([%i *] b))
               ?:  =(a b)  a  [%n |]
             ?:  ?=([%i *] a)  a  b
           ?:  |(=(a.a 0) =(a.b 0))
             ?.  &(=(a.a 0) =(a.b 0))  %-  rou  ?~(a.a b a)
             [%f ?:(=(r %d) &(s.a s.b) |(s.a s.b)) --0 0]
           ?:  =(s.a s.b)
             ?:  s.a  (add:m +>.a +>.b)
             =.(r swr:m (fli (add:m +>.a +>.b)))
           ?:  s.a  (sub:m +>.a +>.b)
           (sub:m +>.b +>.a)
  ::
  ++  sub  |=  [a=fn b=fn]  ^-  fn  (add a (fli b))
  ::
  ++  mul  |=  [a=fn b=fn]  ^-  fn
           !!
  ::
  ++  div  |=  [a=fn b=fn]  ^-  fn
           !!
  ::
  ++  sqt  |=  [a=fn]  ^-  fn
           !!
  ::
  ++  equ  |=  [a=fn b=fn]  ^-  (unit ,?)
           ?:  |(?=([%n *] a) ?=([%n *] b))  ~  :-  ~
           ?:  =(a b)  &
           ?:  |(?=([%i *] a) ?=([%i *] b))  |
           ?:  |(=(a.a 0) =(a.b 0))
             ?:  &(=(a.a 0) =(a.b 0))  &  |
           ?:  |(=(e.a e.b) !=(s.a s.b))  |
           (equ:m +>.a +>.b)
  ::
  ++  lth  |=  [a=fn b=fn]  ^-  (unit ,?)
           ?:  |(?=([%n *] a) ?=([%n *] b))  ~  :-  ~
           ?:  =(a b)  |
           ?:  ?=([%i *] a)  !s.a  ?:  ?=([%i *] b)  s.b
           ?:  |(=(a.a 0) =(a.b 0))
             ?:  &(=(a.a 0) =(a.b 0))  |
             ?:  =(a.a 0)  s.b  !s.a
           ?:  !=(s.a s.b)  s.b
           |-  ?:  =(s.a |)  $(a [%f & e.b a.b], b [%f & e.a a.a])
           (lth:m +>.a +>.b)
  ::
  ++  lte  |=  [a=fn b=fn]  ^-  (unit ,?)
           ?:  |(?=([%n *] a) ?=([%n *] b))  ~  :-  ~
           ?:  =(a b)  &
           ?:  ?=([%i *] a)  !s.a  ?:  ?=([%i *] b)  s.b
           ?:  |(=(a.a 0) =(a.b 0))
             ?:  &(=(a.a 0) =(a.b 0))  &
             ?:  =(a.a 0)  s.b  !s.a
           ?:  !=(s.a s.b)  s.b
           |-  ?:  =(s.a |)  $(a [%f & e.b a.b], b [%f & e.a a.a])
           (lte:m +>.a +>.b)
  ::
  ++  gth  |=  [a=fn b=fn]  ^-  (unit ,?)  (lth b a)
  ::
  ++  gte  |=  [a=fn b=fn]  ^-  (unit ,?)  (lte b a)
  ::
  ::  =((uni a) (uni b)) if and only if (equ a b), with the
  ::  exception of positive/negative 0, which are distinct in
  ::  ++uni but considered equal in comparisons
  ++  uni  |=  [a=fn]  ^-  fn
           ?.  ?=([%f *] a)  a
           ?:  =(a.a 0)  [%f s.a --0 0]
           [%f s.a (uni:m +>.a)]
  --
--
